name: Project Automation

on:
  pull_request:
    types: [opened, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]

permissions:
  contents: read
  issues: write
  pull-requests: write
  # Note: GitHub Actions cannot directly access Projects V2 with GITHUB_TOKEN
  # A Personal Access Token (PAT) with 'project' scope is required

jobs:
  update-project-status:
    runs-on: ubuntu-latest
    steps:
      - name: Move issue to "In Review" when PR is opened
        if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'ready_for_review')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_PAT || secrets.GITHUB_TOKEN }}
          script: |
            const projectNumber = 2;
            const owner = context.repo.owner;
            const prNumber = context.payload.pull_request.number;

            // Get linked issues from PR body
            const prBody = context.payload.pull_request.body || '';
            const issueMatches = prBody.match(/(close[sd]?|fix(e[sd])?|resolve[sd]?)\s+#(\d+)/gi);

            if (!issueMatches) {
              console.log('No linked issues found in PR body');
              return;
            }

            // Extract issue numbers
            const issueNumbers = issueMatches.map(match => {
              const num = match.match(/#(\d+)/);
              return num ? parseInt(num[1]) : null;
            }).filter(n => n !== null);

            console.log(`Found linked issues: ${issueNumbers.join(', ')}`);

            // Get project ID - try both user and organization
            let projectId, statusField;

            try {
              // Try user project first
              const userProjectQuery = `
                query($owner: String!, $number: Int!) {
                  user(login: $owner) {
                    projectV2(number: $number) {
                      id
                      field(name: "Status") {
                        ... on ProjectV2SingleSelectField {
                          id
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              `;

              const userProjectData = await github.graphql(userProjectQuery, {
                owner,
                number: projectNumber
              });

              projectId = userProjectData.user.projectV2.id;
              statusField = userProjectData.user.projectV2.field;
            } catch (error) {
              // Try organization project
              try {
                const orgProjectQuery = `
                  query($owner: String!, $number: Int!) {
                    organization(login: $owner) {
                      projectV2(number: $number) {
                        id
                        field(name: "Status") {
                          ... on ProjectV2SingleSelectField {
                            id
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                `;

                const orgProjectData = await github.graphql(orgProjectQuery, {
                  owner,
                  number: projectNumber
                });

                projectId = orgProjectData.organization.projectV2.id;
                statusField = orgProjectData.organization.projectV2.field;
              } catch (orgError) {
                console.log(`❌ Could not find project #${projectNumber} for user or org: ${owner}`);
                return;
              }
            }

            const inReviewOption = statusField.options.find(opt => opt.name === 'In Review');

            if (!inReviewOption) {
              console.log('In Review status not found in project');
              return;
            }

            // Update each linked issue
            for (const issueNumber of issueNumbers) {
              try {
                // Get issue node ID
                const issueData = await github.rest.issues.get({
                  owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });

                // Get project item ID for this issue
                const itemQuery = `
                  query($projectId: ID!, $issueId: ID!) {
                    node(id: $projectId) {
                      ... on ProjectV2 {
                        items(first: 100) {
                          nodes {
                            id
                            content {
                              ... on Issue {
                                id
                                number
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `;

                const itemsData = await github.graphql(itemQuery, {
                  projectId,
                  issueId: issueData.data.node_id
                });

                const projectItem = itemsData.node.items.nodes.find(
                  item => item.content && item.content.number === issueNumber
                );

                if (!projectItem) {
                  console.log(`Issue #${issueNumber} not found in project`);
                  continue;
                }

                // Update status to "In Review"
                const updateMutation = `
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: {
                        singleSelectOptionId: $optionId
                      }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `;

                await github.graphql(updateMutation, {
                  projectId,
                  itemId: projectItem.id,
                  fieldId: statusField.id,
                  optionId: inReviewOption.id
                });

                console.log(`✅ Moved issue #${issueNumber} to "In Review"`);
              } catch (error) {
                console.log(`❌ Failed to update issue #${issueNumber}: ${error.message}`);
              }
            }

      - name: Move issue to "Review Approved" when PR is approved
        if: github.event_name == 'pull_request_review' && github.event.review.state == 'approved'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_PAT || secrets.GITHUB_TOKEN }}
          script: |
            const projectNumber = 2;
            const owner = context.repo.owner;
            const prNumber = context.payload.pull_request.number;

            // Get PR details to find linked issues
            const pr = await github.rest.pulls.get({
              owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const prBody = pr.data.body || '';
            const issueMatches = prBody.match(/(close[sd]?|fix(e[sd])?|resolve[sd]?)\s+#(\d+)/gi);

            if (!issueMatches) {
              console.log('No linked issues found in PR body');
              return;
            }

            // Extract issue numbers
            const issueNumbers = issueMatches.map(match => {
              const num = match.match(/#(\d+)/);
              return num ? parseInt(num[1]) : null;
            }).filter(n => n !== null);

            console.log(`Found linked issues: ${issueNumbers.join(', ')}`);

            // Get project ID - try both user and organization
            let projectId, statusField;

            try {
              // Try user project first
              const userProjectQuery = `
                query($owner: String!, $number: Int!) {
                  user(login: $owner) {
                    projectV2(number: $number) {
                      id
                      field(name: "Status") {
                        ... on ProjectV2SingleSelectField {
                          id
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              `;

              const userProjectData = await github.graphql(userProjectQuery, {
                owner,
                number: projectNumber
              });

              projectId = userProjectData.user.projectV2.id;
              statusField = userProjectData.user.projectV2.field;
            } catch (error) {
              // Try organization project
              try {
                const orgProjectQuery = `
                  query($owner: String!, $number: Int!) {
                    organization(login: $owner) {
                      projectV2(number: $number) {
                        id
                        field(name: "Status") {
                          ... on ProjectV2SingleSelectField {
                            id
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                `;

                const orgProjectData = await github.graphql(orgProjectQuery, {
                  owner,
                  number: projectNumber
                });

                projectId = orgProjectData.organization.projectV2.id;
                statusField = orgProjectData.organization.projectV2.field;
              } catch (orgError) {
                console.log(`❌ Could not find project #${projectNumber} for user or org: ${owner}`);
                return;
              }
            }

            const reviewApprovedOption = statusField.options.find(opt => opt.name === 'Review Approved');

            if (!reviewApprovedOption) {
              console.log('Review Approved status not found in project');
              return;
            }

            // Update each linked issue
            for (const issueNumber of issueNumbers) {
              try {
                // Get issue node ID
                const issueData = await github.rest.issues.get({
                  owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });

                // Get project item ID for this issue
                const itemQuery = `
                  query($projectId: ID!, $issueId: ID!) {
                    node(id: $projectId) {
                      ... on ProjectV2 {
                        items(first: 100) {
                          nodes {
                            id
                            content {
                              ... on Issue {
                                id
                                number
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `;

                const itemsData = await github.graphql(itemQuery, {
                  projectId,
                  issueId: issueData.data.node_id
                });

                const projectItem = itemsData.node.items.nodes.find(
                  item => item.content && item.content.number === issueNumber
                );

                if (!projectItem) {
                  console.log(`Issue #${issueNumber} not found in project`);
                  continue;
                }

                // Update status to "Review Approved"
                const updateMutation = `
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: {
                        singleSelectOptionId: $optionId
                      }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `;

                await github.graphql(updateMutation, {
                  projectId,
                  itemId: projectItem.id,
                  fieldId: statusField.id,
                  optionId: reviewApprovedOption.id
                });

                console.log(`✅ Moved issue #${issueNumber} to "Review Approved"`);
              } catch (error) {
                console.log(`❌ Failed to update issue #${issueNumber}: ${error.message}`);
              }
            }
